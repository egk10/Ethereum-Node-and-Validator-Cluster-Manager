name: Build and Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., 1.0.0)'
        required: true
        default: '1.0.0'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-releases:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        release-type: [core, standard, monitoring, full]
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Get version
      id: version
      run: |
        if [[ $GITHUB_REF == refs/tags/* ]]; then
          VERSION=${GITHUB_REF#refs/tags/v}
        else
          VERSION=${{ github.event.inputs.version }}
        fi
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        
    - name: Build release package
      run: |
        chmod +x build_release.py
        python3 build_release.py --version ${{ steps.version.outputs.version }} --type ${{ matrix.release-type }}
        
    - name: Upload release artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ethereum-validator-manager-${{ matrix.release-type }}-v${{ steps.version.outputs.version }}
        path: dist/*.zip
        
  build-docker:
    runs-on: ubuntu-latest
    needs: build-releases
    permissions:
      contents: read
      packages: write
      
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Get version
      id: version
      run: |
        if [[ $GITHUB_REF == refs/tags/* ]]; then
          VERSION=${GITHUB_REF#refs/tags/v}
        else
          VERSION=${{ github.event.inputs.version }}
        fi
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        
    - name: Build and push Docker images
      run: |
        chmod +x build_docker.sh
        # Build all variants
        for release_type in core standard monitoring full; do
          docker buildx build \
            --platform linux/amd64,linux/arm64 \
            --target $release_type \
            --tag ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.version.outputs.version }}-$release_type \
            --tag ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest-$release_type \
            --label "org.opencontainers.image.version=${{ steps.version.outputs.version }}" \
            --label "org.opencontainers.image.release-type=$release_type" \
            --push \
            .
        done
        
        # Tag default (core) image
        docker buildx build \
          --platform linux/amd64,linux/arm64 \
          --target core \
          --tag ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.version.outputs.version }} \
          --tag ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest \
          --push \
          .
          
  create-release:
    runs-on: ubuntu-latest
    needs: [build-releases, build-docker]
    if: startsWith(github.ref, 'refs/tags/')
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: release-artifacts
        
    - name: Get version
      id: version
      run: echo "version=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT
      
    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ github.ref }}
        name: Ethereum Validator Manager v${{ steps.version.outputs.version }}
        body: |
          ## 🎉 Ethereum Node and Validator Cluster Manager v${{ steps.version.outputs.version }}
          
          ### 📦 Release Variants:
          
          - **Core** (`ethereum-validator-manager-core-v${{ steps.version.outputs.version }}.zip`)
            Essential validator management functionality
            
          - **Standard** (`ethereum-validator-manager-standard-v${{ steps.version.outputs.version }}.zip`)
            Core + backup management + enhanced performance
            
          - **Monitoring** (`ethereum-validator-manager-monitoring-v${{ steps.version.outputs.version }}.zip`) 
            Standard + Grafana/Prometheus monitoring integration
            
          - **Full** (`ethereum-validator-manager-full-v${{ steps.version.outputs.version }}.zip`)
            All features including experimental AI analysis
            
          ### 🐳 Docker Images:
          ```bash
          # Core functionality
          docker pull ghcr.io/${{ github.repository }}:${{ steps.version.outputs.version }}
          
          # Specific variants
          docker pull ghcr.io/${{ github.repository }}:${{ steps.version.outputs.version }}-standard
          docker pull ghcr.io/${{ github.repository }}:${{ steps.version.outputs.version }}-monitoring  
          docker pull ghcr.io/${{ github.repository }}:${{ steps.version.outputs.version }}-full
          ```
          
          ### 🚀 Quick Start:
          1. Download the appropriate release variant
          2. Extract and run `./install.sh`
          3. Configure `eth_validators/config.yaml`
          4. Run `python3 -m eth_validators node versions-all`
          
          See README.md in each release for detailed instructions.
        files: release-artifacts/**/*.zip
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
